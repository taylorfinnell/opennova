using Godot;
using System.Text;

namespace OpenNova.Definition.SerDer
{
    [GlobalClass]
    public partial class TerrainDefFormatSaver : ResourceFormatSaver
    {
        public override string[] _GetRecognizedExtensions(Resource resource)
        {
            if (resource is TerrainDefinition)
                return new[] { "trn" };
            return new string[0];
        }

        public override bool _Recognize(Resource resource)
        {
            return resource is TerrainDefinition;
        }

        public override Error _Save(Resource resource, string path, uint flags)
        {
            if (!(resource is TerrainDefinition terrainDef))
            {
                return Error.InvalidParameter;
            }

            var content = SerializeToTrn(terrainDef);
            using var file = FileAccess.Open(path, FileAccess.ModeFlags.Write);
            if (file == null)
            {
                GD.PrintErr($"Failed to open file for writing: {path}");
                return Error.FileNoPermission;
            }

            file.StoreBuffer(Encoding.UTF8.GetBytes(content));
            file.Close();

            GD.Print($"Successfully saved terrain to {path}");
            return Error.Ok;
        }

        private string SerializeToTrn(TerrainDefinition terrainDef)
        {
            var sb = new StringBuilder();

            sb.AppendLine("; Terrain Definition File");
            sb.AppendLine("; Generated by OpenNova");
            sb.AppendLine();

            if (!string.IsNullOrEmpty(terrainDef.TerrainName))
                sb.AppendLine($"terrain_name {terrainDef.TerrainName}");
            if (!string.IsNullOrEmpty(terrainDef.TerrainCreator))
                sb.AppendLine($"terrain_creator {terrainDef.TerrainCreator}");

            sb.AppendLine($"water_height {terrainDef.WaterHeight}");

            sb.AppendLine($"polytrn_detaildensity {terrainDef.DetailDensity}");
            sb.AppendLine($"polytrn_detaildensity2 {terrainDef.DetailDensity2}");
            sb.AppendLine($"polytrn_sectorcount {terrainDef.SectorCount}");
            sb.AppendLine($"polytrn_wrapx {(terrainDef.WrapX ? 1 : 0)}");
            sb.AppendLine($"polytrn_wrapy {(terrainDef.WrapY ? 1 : 0)}");

            sb.AppendLine($"polytrn_origin {terrainDef.Origin.X} {terrainDef.Origin.Y}");

            if (terrainDef.Sectors != null && terrainDef.SectorsWidth > 0 && terrainDef.SectorsHeight > 0)
            {
                for (int y = 0; y < terrainDef.SectorsHeight; y++)
                {
                    var rowValues = new Godot.Collections.Array<string>();
                    for (int x = 0; x < terrainDef.SectorsWidth; x++)
                    {
                        int flatIndex = y * terrainDef.SectorsWidth + x;
                        if (flatIndex < terrainDef.Sectors.Length)
                        {
                            rowValues.Add(terrainDef.Sectors[flatIndex].ToString());
                        }
                    }
                    if (rowValues.Count > 0)
                    {
                        sb.AppendLine($"polytrn_sectors {string.Join(" ", rowValues)}");
                    }
                }
            }

            if (terrainDef.PolytrnColormap != null)
                sb.AppendLine($"polytrn_colormap {GetResourceFilename(terrainDef.PolytrnColormap)}");
            if (terrainDef.PolytrnDetailmap != null)
                sb.AppendLine($"polytrn_detailmap {GetResourceFilename(terrainDef.PolytrnDetailmap)}");
            if (terrainDef.PolytrnDetailmapC1 != null)
                sb.AppendLine($"polytrn_detailmap_c1 {GetResourceFilename(terrainDef.PolytrnDetailmapC1)}");
            if (terrainDef.PolytrnDetailmapC2 != null)
                sb.AppendLine($"polytrn_detailmap_c2 {GetResourceFilename(terrainDef.PolytrnDetailmapC2)}");
            if (terrainDef.PolytrnDetailmapC3 != null)
                sb.AppendLine($"polytrn_detailmap_c3 {GetResourceFilename(terrainDef.PolytrnDetailmapC3)}");
            if (terrainDef.PolytrnDetailmap2 != null)
                sb.AppendLine($"polytrn_detailmap2 {GetResourceFilename(terrainDef.PolytrnDetailmap2)}");
            if (terrainDef.PolytrnDetailmapdist != null)
                sb.AppendLine($"polytrn_detailmapdist {GetResourceFilename(terrainDef.PolytrnDetailmapdist)}");
            if (terrainDef.TerrainPolyDataFile != null)
                sb.AppendLine($"polytrn_polydata {GetResourceFilename(terrainDef.TerrainPolyDataFile)}");
            if (terrainDef.PolytrnTilestrip != null)
                sb.AppendLine($"polytrn_tilestrip {GetResourceFilename(terrainDef.PolytrnTilestrip)}");
            if (terrainDef.PolytrnCharmap != null)
                sb.AppendLine($"polytrn_charmap {GetResourceFilename(terrainDef.PolytrnCharmap)}");
            if (terrainDef.PolytrnFoliagemap != null)
                sb.AppendLine($"polytrn_foliagemap {GetResourceFilename(terrainDef.PolytrnFoliagemap)}");
            if (terrainDef.PolytrnDetailblendmap != null)
                sb.AppendLine($"polytrn_detailblendmap {GetResourceFilename(terrainDef.PolytrnDetailblendmap)}");

            if (terrainDef.WaterRgb != null && terrainDef.WaterRgb.Length > 0)
                sb.AppendLine($"water_rgb {string.Join(",", terrainDef.WaterRgb)}");
            sb.AppendLine($"water_murk {terrainDef.WaterMurk}");

            sb.AppendLine($"lock_topleft {terrainDef.LockTopLeft.X} {terrainDef.LockTopLeft.Y}");
            sb.AppendLine($"lock_topright {terrainDef.LockTopRight.X} {terrainDef.LockTopRight.Y}");
            sb.AppendLine($"lock_bottomleft {terrainDef.LockBottomLeft.X} {terrainDef.LockBottomLeft.Y}");
            sb.AppendLine($"lock_bottomright {terrainDef.LockBottomRight.X} {terrainDef.LockBottomRight.Y}");

            foreach (var foliage in terrainDef.Foliages)
            {
                sb.AppendLine("foliage");
                if (!string.IsNullOrEmpty(foliage.Graphic))
                    sb.AppendLine($"    graphic {foliage.Graphic}");
                sb.AppendLine($"    color_lower {foliage.ColorLower}");
                sb.AppendLine($"    color_upper {foliage.ColorUpper}");
                sb.AppendLine($"    match {foliage.Match}");
                if (foliage.Attrib.Count > 0)
                    sb.AppendLine($"    attrib {string.Join(" ", foliage.Attrib)}");
                sb.AppendLine("end");
                sb.AppendLine();
            }

            return sb.ToString();
        }

        private static string GetResourceFilename(Resource resource)
        {
            if (resource == null || string.IsNullOrEmpty(resource.ResourcePath))
                return "";

            var path = resource.ResourcePath;
            var filename = System.IO.Path.GetFileName(path);
            return filename;
        }
    }
}